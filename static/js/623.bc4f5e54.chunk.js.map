{"version":3,"file":"static/js/623.bc4f5e54.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactsForm/ContactsForm.module.css?d5f2","../node_modules/nanoid/index.browser.js","redux/contacts/contactsSelector.jsx","components/ContactsForm/ContactsForm.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"borderContainer\":\"ContactsForm_borderContainer__GyuED\",\"phonebookTitle\":\"ContactsForm_phonebookTitle__RWvg2\",\"contactsForm\":\"ContactsForm_contactsForm__e2vze\",\"label\":\"ContactsForm_label__Z7jht\",\"input\":\"ContactsForm_input__UjXFK\",\"addButton\":\"ContactsForm_addButton__oD5sw\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectFilter = state => state.contacts.filter;\nexport const selectIsLoading = state => state.isLoading;\nexport const selectError = state => state.contacts.error;\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport css from './ContactsForm.module.css';\nimport { nanoid } from 'nanoid';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operation';\nimport { selectContacts } from 'redux/contacts/contactsSelector';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const handleInput = evt => {\n    const { name, value } = evt.target;\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    const nameContacts = contacts.find(contact => contact.name === name);\n    if (nameContacts) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n    reset();\n  };\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <>\n      <h1 className={css.phonebookTitle}>Phonebook</h1>\n      <div className={css.borderContainer}>\n        <form className={css.contactsForm} onSubmit={handleSubmit}>\n          <label htmlFor={nanoid()} className={css.label}>\n            Name\n            <input\n              id={nanoid()}\n              className={css.input}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              value={name}\n              onChange={handleInput}\n              required\n            />\n          </label>\n          <label htmlFor={nanoid()} className={css.label}>\n            Number\n            <input\n              id={nanoid()}\n              className={css.input}\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              value={number}\n              onChange={handleInput}\n              required\n            />\n          </label>\n          <button className={css.addButton} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </div>\n    </>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\",\"listElements\":\"ContactList_listElements__5SWCo\",\"deleteButton\":\"ContactList_deleteButton__3hT3n\"};","import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { deleteContact } from 'redux/contacts/operation';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const onDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <li>\n      <span>\n        {name}: {number}\n      </span>\n      <button\n        className={css.deleteButton}\n        type=\"button\"\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport css from './ContactList.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operation';\nimport {\n  selectContacts,\n  selectError,\n  selectFilter,\n  selectIsLoading,\n} from 'redux/contacts/contactsSelector';\nimport { ContactListItem } from './ContactListItem';\nimport { useEffect } from 'react';\n\nconst ContactList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContactList = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const contactsList = filteredContactList();\n\n  return (\n    <div>\n      <ul className={css.contactList}>\n        {isLoading && !error && <p>Loading contacts...</p>}\n        {error && <p>{error}</p>}\n        {contactsList.map(({ id, name, number }) => (\n          <ContactListItem key={id} name={name} number={number} id={id} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  listContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      key: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\nexport default ContactList;\n","// extracted by mini-css-extract-plugin\nexport default {\"inputFilter\":\"Filter_inputFilter__8QMOp\",\"contactsTitle\":\"Filter_contactsTitle__eTnDx\",\"filterTitle\":\"Filter_filterTitle__5SDqd\"};","import PropTypes from 'prop-types';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/ContactsSlice';\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const handleFilter = e => dispatch(changeFilter(e.currentTarget.value));\n\n  return (\n    <>\n      <h2 className={css.contactsTitle}>Contacts:</h2>\n      <p className={css.filterTitle}>Find contact by name:</p>\n      <input\n        className={css.inputFilter}\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </>\n  );\n};\nFilter.propTypes = {\n  handleFilter: PropTypes.func,\n};\nexport default Filter;\n","import ContactForm from 'components/ContactsForm/ContactsForm';\nimport ContactList from 'components/ContactList/ContactList';\nimport { nanoid } from 'nanoid';\nimport Filter from 'components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectError, selectIsLoading } from 'redux/contacts/contactsSelector';\nimport { useEffect } from 'react';\nimport { fetchContacts } from 'redux/contacts/operation';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ContactForm />\n      {isLoading && !error && <p>Request in progress...</p>}\n      <Filter />\n      <ContactList key={nanoid()} />\n    </div>\n  );\n}\n\nexport default Contacts;"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","useState","name","setName","number","setNumber","useSelector","dispatch","useDispatch","handleInput","evt","target","value","reset","className","css","onSubmit","preventDefault","newContact","find","contact","alert","addContact","htmlFor","type","pattern","title","onChange","required","ContactListItem","onClick","deleteContact","useEffect","fetchContacts","contactsList","toLowerCase","includes","map","e","changeFilter","currentTarget"],"sourceRoot":""}